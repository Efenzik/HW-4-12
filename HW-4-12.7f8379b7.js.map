{"mappings":"ACmEc,IAnEd,MACE,YAAY,CAAA,SAAE,CAAQ,CAAA,cAAE,CAAa,CAAE,CAAE,CACvC,IAAI,CAAC,OAAO,CAAG,SAAS,aAAa,CAAC,GACtC,IAAI,CAAC,UAAU,CAAG,EAClB,IAAI,CAAC,UAAU,CAAG,KAElB,IAAI,CAAC,SAAS,CAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,uBAC5C,IAAI,CAAC,UAAU,CAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,wBAC7C,IAAI,CAAC,SAAS,CAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,uBAC5C,IAAI,CAAC,SAAS,CAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,sBAC9C,CAEA,OAAQ,CACN,IAAI,CAAC,WAAW,GAChB,IAAI,CAAC,UAAU,CAAG,YAAY,IAAM,IAAI,CAAC,WAAW,GAAI,IAC1D,CAEA,MAAO,CACL,cAAc,IAAI,CAAC,UAAU,EAC7B,IAAI,CAAC,UAAU,CAAG,IACpB,CAEA,aAAc,CACZ,IAAM,EAAM,IAAI,KACV,EAAO,IAAI,CAAC,UAAU,CAAG,EAE/B,GAAI,GAAQ,EAAG,CACb,IAAI,CAAC,IAAI,GACT,IAAI,CAAC,SAAS,CAAC,WAAW,CAAG,KAC7B,IAAI,CAAC,UAAU,CAAC,WAAW,CAAG,KAC9B,IAAI,CAAC,SAAS,CAAC,WAAW,CAAG,KAC7B,IAAI,CAAC,SAAS,CAAC,WAAW,CAAG,KAC7B,MACF,CAMA,IAAM,EAAO,KAAK,KAAK,CAAC,EAAQ,OAO1B,EAAQ,KAAK,KAAK,CAAE,EAAQ,MAAyB,MAMrD,EAAO,KAAK,KAAK,CAAE,EAAQ,KAAoB,KAM/C,EAAO,KAAK,KAAK,CAAE,EAAQ,IAAc,IAE/C,CAAA,IAAI,CAAC,SAAS,CAAC,WAAW,CAAG,EAAK,QAAQ,GAAG,QAAQ,CAAC,EAAG,KACzD,IAAI,CAAC,UAAU,CAAC,WAAW,CAAG,EAAM,QAAQ,GAAG,QAAQ,CAAC,EAAG,KAC3D,IAAI,CAAC,SAAS,CAAC,WAAW,CAAG,EAAK,QAAQ,GAAG,QAAQ,CAAC,EAAG,KACzD,IAAI,CAAC,SAAS,CAAC,WAAW,CAAG,EAAK,QAAQ,GAAG,QAAQ,CAAC,EAAG,IAC3D,CACF,EAEiC,CAC/B,SAAU,WACV,cAAe,IAAI,KAAK,uBAC1B,GAEM,KAAK","sources":["<anon>","src/script.js"],"sourcesContent":["var $b63be9b0371e788c$exports = {};\nclass $b63be9b0371e788c$var$CountdownTimer {\n    constructor({ selector: selector, targetTimeEnd: targetTimeEnd }){\n        this.timerEl = document.querySelector(selector);\n        this.targetTime = targetTimeEnd;\n        this.intervalId = null;\n        this.daysCount = this.timerEl.querySelector('[data-value=\"days\"]');\n        this.hoursCount = this.timerEl.querySelector('[data-value=\"hours\"]');\n        this.minsCount = this.timerEl.querySelector('[data-value=\"mins\"]');\n        this.secsCount = this.timerEl.querySelector('[data-value=\"secs\"]');\n    }\n    start() {\n        this.updateTimer();\n        this.intervalId = setInterval(()=>this.updateTimer(), 1000);\n    }\n    stop() {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n    updateTimer() {\n        const now = new Date();\n        const time = this.targetTime - now;\n        if (time <= 0) {\n            this.stop();\n            this.daysCount.textContent = \"00\";\n            this.hoursCount.textContent = \"00\";\n            this.minsCount.textContent = \"00\";\n            this.secsCount.textContent = \"00\";\n            return;\n        }\n        /*\n     * Дні, що залишилися: ділимо значення UTC на 1000 * 60 * 60 * 24, кількість\n     * мілісекунд в один день (мілісекунди * секунди * хвилини * години)\n     */ const days = Math.floor(time / 86400000);\n        /*\n     * Решта годин: отримуємо залишок від попереднього розрахунку за допомогою оператора\n     * залишку% і ділимо його на кількість мілісекунд в одній годині\n     * (1000 * 60 * 60 = мілісекунди * хвилини * секунди)\n     */ const hours = Math.floor(time % 86400000 / 3600000);\n        /*\n     * Решта хвилин: отримуємо хвилини, що залишилися і ділимо їх на кількість\n     * мілісекунд в одній хвилині (1000 * 60 = мілісекунди * секунди)\n     */ const mins = Math.floor(time % 3600000 / 60000);\n        /*\n     * Решта секунд: отримуємо секунди, які залишилися і ділимо їх на кількість\n     * миллисекунд в одной секунде (1000)\n     */ const secs = Math.floor(time % 60000 / 1000);\n        this.daysCount.textContent = days.toString().padStart(2, \"0\");\n        this.hoursCount.textContent = hours.toString().padStart(2, \"0\");\n        this.minsCount.textContent = mins.toString().padStart(2, \"0\");\n        this.secsCount.textContent = secs.toString().padStart(2, \"0\");\n    }\n}\nconst $b63be9b0371e788c$var$timer = new $b63be9b0371e788c$var$CountdownTimer({\n    selector: \"#timer-1\",\n    targetTimeEnd: new Date(\"Sep 25 2025 17:13:52\")\n});\n$b63be9b0371e788c$var$timer.start();\n\n\n//# sourceMappingURL=HW-4-12.7f8379b7.js.map\n","class CountdownTimer {\n  constructor({ selector, targetTimeEnd }) {\n    this.timerEl = document.querySelector(selector);\n    this.targetTime = targetTimeEnd;\n    this.intervalId = null;\n\n    this.daysCount = this.timerEl.querySelector('[data-value=\"days\"]');\n    this.hoursCount = this.timerEl.querySelector('[data-value=\"hours\"]');\n    this.minsCount = this.timerEl.querySelector('[data-value=\"mins\"]');\n    this.secsCount = this.timerEl.querySelector('[data-value=\"secs\"]');\n  }\n\n  start() {\n    this.updateTimer();\n    this.intervalId = setInterval(() => this.updateTimer(), 1000);\n  }\n\n  stop() {\n    clearInterval(this.intervalId);\n    this.intervalId = null;\n  }\n\n  updateTimer() {\n    const now = new Date();\n    const time = this.targetTime - now;\n\n    if (time <= 0) {\n      this.stop();\n      this.daysCount.textContent = \"00\";\n      this.hoursCount.textContent = \"00\";\n      this.minsCount.textContent = \"00\";\n      this.secsCount.textContent = \"00\";\n      return;\n    }\n\n    /*\n     * Дні, що залишилися: ділимо значення UTC на 1000 * 60 * 60 * 24, кількість\n     * мілісекунд в один день (мілісекунди * секунди * хвилини * години)\n     */\n    const days = Math.floor(time / (1000 * 60 * 60 * 24));\n\n    /*\n     * Решта годин: отримуємо залишок від попереднього розрахунку за допомогою оператора\n     * залишку% і ділимо його на кількість мілісекунд в одній годині\n     * (1000 * 60 * 60 = мілісекунди * хвилини * секунди)\n     */\n    const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n\n    /*\n     * Решта хвилин: отримуємо хвилини, що залишилися і ділимо їх на кількість\n     * мілісекунд в одній хвилині (1000 * 60 = мілісекунди * секунди)\n     */\n    const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n\n    /*\n     * Решта секунд: отримуємо секунди, які залишилися і ділимо їх на кількість\n     * миллисекунд в одной секунде (1000)\n     */\n    const secs = Math.floor((time % (1000 * 60)) / 1000);\n\n    this.daysCount.textContent = days.toString().padStart(2, \"0\");\n    this.hoursCount.textContent = hours.toString().padStart(2, \"0\");\n    this.minsCount.textContent = mins.toString().padStart(2, \"0\");\n    this.secsCount.textContent = secs.toString().padStart(2, \"0\");\n  }\n}\n\nconst timer = new CountdownTimer({\n  selector: \"#timer-1\",\n  targetTimeEnd: new Date(\"Sep 25 2025 17:13:52\"),\n});\n\ntimer.start();\n"],"names":["selector","targetTimeEnd","timerEl","document","querySelector","targetTime","intervalId","daysCount","hoursCount","minsCount","secsCount","start","updateTimer","setInterval","stop","clearInterval","now","Date","time","textContent","days","Math","floor","hours","mins","secs","toString","padStart"],"version":3,"file":"HW-4-12.7f8379b7.js.map"}